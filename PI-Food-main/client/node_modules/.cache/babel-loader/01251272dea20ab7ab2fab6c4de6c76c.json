{"ast":null,"code":"var _jsxFileName = \"/Users/victoriacasal/Desktop/Food/PI-Food-main/PI-Food/PI-Food-main/client/src/components/RecipeCreate.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useHistory } from 'react-router-dom';\nimport { postRecipe, getRecipeType } from '../actions/index';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RecipeCreate() {\n  _s();\n\n  const dispatch = useDispatch();\n  const types = useSelector(state => state.recipeTypes); //me creo una constante para poder hacer la validacion\n\n  const [err, setErr] = useState({}); //va a ser un objeto vacio\n  //al bloquear el boton, hay campos que son requeridos y si no se llenan no te deja\n  //crear la receta\n  //tambien para poder bloquear el boton\n\n  const [btnSend, setBtnSend] = useState(false); //la validacion tmb se haria desde el back, es mas correcto hacerlo de los dos lados y que no se rompa\n  //y por fuera de todo lo que vine haciendo voy a crear la validacion del formulario\n\n  function validar(input) {\n    let err = {};\n\n    if (!input.name) {\n      err.name = \"Debe ingresar un Nombre.\";\n      setBtnSend(false);\n    } else if (!input.resume) {\n      err.resume = \"Debe ingresar un Resumen.\";\n      setBtnSend(false);\n    } else {\n      setBtnSend(true);\n    }\n\n    return err;\n  } //el history y history.push, es basicamente lo que hace para redirigirme a la ruta que yo le diga\n  // const history = useHistory();\n  //tengo que renderizar el formulario y poder guardarlo en un estado\n\n\n  const [input, setInput] = useState({\n    name: \"\",\n    score: \"\",\n    healthylevel: \"\",\n    resume: \"\",\n    stepbystep: \"\",\n    image: \"\",\n    diets: []\n  });\n  useEffect(() => {\n    dispatch(getRecipeType());\n  }, [dispatch]); //vamos a empezar a aplicar logicas\n  //cada vez que yo cambie mis input no se vayan cambiando\n  //quiero ir guardando lo que el usuario va a ir escribiendo\n\n  function handleChange(e) {\n    setInput({ ...input,\n      [e.target.name]: e.target.value\n    });\n    setErr(validar({ ...input,\n      [e.target.name]: e.target.value\n    }));\n  } //cada vez que ejecutes esta funcion, ademas de lo que tiene agregale lo que se va modificando\n  //como este se porta de forma distinta tengo que usar otra funcion\n\n\n  function handleSelect(e) {\n    setInput({ ...input,\n      diets: [...input.diets, e.target.value]\n    });\n  } //es la que se utiliza para los tipos de dieta\n  //traeme lo que ya habia y concatenale lo que yo te estoy seleccionando ahora\n  //hago como una lista\n  //por ultimo me falta el submit\n\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!input.diets.length) {\n      return alert(\"You must choose your diet type\");\n    } else {\n      if (!input.image) input.image = \"https://cdn.pixabay.com/photo/2014/12/21/23/28/recipe-575434_960_720.png\";\n      dispatch(postRecipe(input));\n      alert(\"Recipe created\");\n      setInput({\n        name: \"\",\n        score: \"\",\n        healthylevel: \"\",\n        resume: \"\",\n        stepbystep: \"\",\n        image: \"\",\n        diets: []\n      }); // history.push('/home');\n    }\n  } //para poder ir eliminando si tengo ganas, con el botton X u otro hago un handleDelete\n\n\n  function handleDelete(el) {\n    setInput({ ...input,\n      types: input.types.filter(t => t !== el)\n    });\n  } //renderizo\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/home\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Go back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create your own recipe!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.name,\n          name: \"name\",\n          onChange: e => handleChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), err.name && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: err.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Score:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.score,\n          name: \"score\",\n          onChange: e => handleChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Healthy Level:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.healthylevel,\n          name: \"healthylevel\",\n          onChange: e => handleChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Resume:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.resumee,\n          name: \"resume\",\n          onChange: e => handleChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }, this), err.resume && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: err.resume\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Steps:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.stepbystep,\n          name: \"stepbystep\",\n          onChange: e => handleChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.image,\n          name: \"image\",\n          onChange: e => handleChange(e)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        onChange: e => handleSelect(e),\n        name: \"diets\",\n        children: types && types.map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: t.value,\n          children: t.name\n        }, t.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 5\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !btnSend,\n        children: \"Create Recipe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), input.types.map(el => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: el\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), \")\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDelete(el),\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n} //hay un problema que el map lo toma y dsp al rato lo rompe\n\n_s(RecipeCreate, \"RmKKOJimIdSq0WD097BiIsT8r7s=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = RecipeCreate;\n{\n  /* <select onChange={(e) => handleSelect(e)} name=\"diets\">\n  {types.map((t) => (\n     <option value={t.value} key={t.id}>{t.name}</option>\n  ))}\n  </select> */\n} // <ul><li>{input.types.map(el => el + \",\")}</li></ul> para que vaya seleccionando\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeCreate\");","map":{"version":3,"sources":["/Users/victoriacasal/Desktop/Food/PI-Food-main/PI-Food/PI-Food-main/client/src/components/RecipeCreate.jsx"],"names":["React","useState","useEffect","Link","useHistory","postRecipe","getRecipeType","useDispatch","useSelector","RecipeCreate","dispatch","types","state","recipeTypes","err","setErr","btnSend","setBtnSend","validar","input","name","resume","setInput","score","healthylevel","stepbystep","image","diets","handleChange","e","target","value","handleSelect","handleSubmit","preventDefault","length","alert","handleDelete","el","filter","t","resumee","map","id"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport {Link, useHistory} from 'react-router-dom';\nimport {postRecipe, getRecipeType} from '../actions/index';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport default function RecipeCreate (){\n    const dispatch = useDispatch();\n    const types = useSelector((state) => state.recipeTypes);\n\n    //me creo una constante para poder hacer la validacion\n    const [err, setErr] = useState({}); //va a ser un objeto vacio\n//al bloquear el boton, hay campos que son requeridos y si no se llenan no te deja\n//crear la receta\n//tambien para poder bloquear el boton\nconst [btnSend, setBtnSend] = useState(false);\n//la validacion tmb se haria desde el back, es mas correcto hacerlo de los dos lados y que no se rompa\n    //y por fuera de todo lo que vine haciendo voy a crear la validacion del formulario\n    function validar(input){\n        let err = {};\n        if(!input.name){\n                err.name=\"Debe ingresar un Nombre.\";\n                setBtnSend(false);\n        }else if(!input.resume){\n                err.resume=\"Debe ingresar un Resumen.\";\n                setBtnSend(false);\n        }else{\n                setBtnSend(true);\n        }\n        return err;\n}\n//el history y history.push, es basicamente lo que hace para redirigirme a la ruta que yo le diga\n    // const history = useHistory();\n\n    //tengo que renderizar el formulario y poder guardarlo en un estado\n   const [input, setInput] = useState({\n    name: \"\",\n    score:\"\",\n    healthylevel:\"\",\n    resume: \"\",\n    stepbystep:\"\",\n    image:\"\",\n    diets:[],\n   })\n\nuseEffect(() => {\n    dispatch(getRecipeType())\n},[dispatch])\n\n//vamos a empezar a aplicar logicas\n//cada vez que yo cambie mis input no se vayan cambiando\n//quiero ir guardando lo que el usuario va a ir escribiendo\nfunction handleChange(e){\n    setInput({\n            ...input,\n            [e.target.name]: e.target.value,\n    })\n    setErr(validar({\n        ...input,\n        [e.target.name]: e.target.value,\n}))\n}\n\n//cada vez que ejecutes esta funcion, ademas de lo que tiene agregale lo que se va modificando\n\n//como este se porta de forma distinta tengo que usar otra funcion\nfunction handleSelect(e){\n               \n    setInput({\n            ...input,\n            diets: [...input.diets, e.target.value],\n    })\n}\n//es la que se utiliza para los tipos de dieta\n//traeme lo que ya habia y concatenale lo que yo te estoy seleccionando ahora\n//hago como una lista\n\n//por ultimo me falta el submit\nfunction handleSubmit(e) {\n    e.preventDefault();\n    if(!input.diets.length){\n        return alert(\"You must choose your diet type\")\n}else{\n    if(!input.image) input.image=\"https://cdn.pixabay.com/photo/2014/12/21/23/28/recipe-575434_960_720.png\"\n    dispatch(postRecipe(input));\n    alert(\"Recipe created\")\n    setInput({\n          name: \"\",\n          score:\"\",\n          healthylevel:\"\",\n          resume: \"\",\n          stepbystep:\"\",\n          image:\"\",\n          diets:[],  \n        })\n        // history.push('/home');\n}\n}\n\n//para poder ir eliminando si tengo ganas, con el botton X u otro hago un handleDelete\nfunction handleDelete(el) {\n    setInput({\n        ...input,\n        types: input.types.filter(t => t !== el)\n    })\n}\n\n//renderizo\nreturn(\n    <div>\n        <Link to = \"/home\"><button>Go back</button></Link>\n        <h1>Create your own recipe!</h1>\n        <form>\n            <div>\n                <label>Name:</label>\n                <input\n                type = \"text\"\n                value = {input.name}\n                name = \"name\"\n                onChange={(e) => handleChange(e)}\n                />\n                {\n                  err.name && (\n                <p>{err.name}</p>\n                 )\n                 }\n            </div>\n            <div>\n                <label>Score:</label>\n                <input\n                type = \"text\"\n                value = {input.score}\n                name = \"score\"\n                onChange={(e) => handleChange(e)}\n                />\n            </div>\n            <div>\n                <label>Healthy Level:</label>\n                <input\n                type = \"text\"\n                value = {input.healthylevel}\n                name = \"healthylevel\"\n                onChange={(e) => handleChange(e)}\n                />\n            </div>\n            <div>\n                <label>Resume:</label>\n                <input\n                type = \"text\"\n                value = {input.resumee}\n                name = \"resume\"\n                onChange={(e) => handleChange(e)}\n                />\n                {\n               err.resume && (\n               <p>{err.resume}</p>\n                )\n                }\n            </div>\n            <div>\n                <label>Steps:</label>\n                <input\n                type = \"text\"\n                value = {input.stepbystep}\n                name = \"stepbystep\"\n                onChange={(e) => handleChange(e)}\n                />\n            </div>\n            <div>\n                <label>Image:</label>\n                <input\n                type = \"text\"\n                value = {input.image}\n                name = \"image\"\n                onChange={(e) => handleChange(e)}\n                />\n            </div>\n            <select onChange={(e) => handleSelect(e)} name=\"diets\">\n{types && types.map((t) => (\n    <option value={t.value} key={t.id}>{t.name}</option>\n))}\n</select>\n\n        <button type=\"submit\" disabled={!btnSend}>Create Recipe</button>\n        </form>\n        {input.types.map(el =>\n            <div>\n                <p>{el}</p>)\n                <button onClick={()=> handleDelete(el)}>x</button>\n                </div>)}\n    </div>\n)\n\n}\n//hay un problema que el map lo toma y dsp al rato lo rompe\n{/* <select onChange={(e) => handleSelect(e)} name=\"diets\">\n{types.map((t) => (\n    <option value={t.value} key={t.id}>{t.name}</option>\n))}\n</select> */}\n// <ul><li>{input.types.map(el => el + \",\")}</li></ul> para que vaya seleccionando"]},"metadata":{},"sourceType":"module"}