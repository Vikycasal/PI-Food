{"ast":null,"code":"var _jsxFileName = \"/Users/victoriacasal/Desktop/Food/PI-Food-main/PI-Food/PI-Food-main/client/src/components/RecipeCreate.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useHistory } from 'react-router-dom';\nimport { postRecipe, getRecipeType } from '../actions/index';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styles from \"../styles/RecipeCreate.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction RecipeCreate() {\n  _s();\n\n  const dispatch = useDispatch();\n  const types = useSelector(state => state.recipeTypes); //me traigo las recetas usando el useSelector, trayendo el estado\n  //el history y history.push, es basicamente lo que hace para redirigirme a la ruta que yo le diga\n\n  const history = useHistory(); //me creo una constante para poder hacer la validacion\n\n  const [err, setErr] = useState({}); //va a ser un objeto vacio\n  //al bloquear el boton, hay campos que son requeridos y si no se llenan no te deja\n  //crear la receta\n  //tambien para poder bloquear el boton\n\n  const [btnSend, setBtnSend] = useState(false); //la validacion tmb se haria desde el back, es mas correcto hacerlo de los dos lados y que no se rompa\n  //y por fuera de todo lo que vine haciendo voy a crear la validacion del formulario\n\n  /****control de errores */\n\n  function validar(input) {\n    let err = {};\n\n    if (!input.name) {\n      err.name = \"You must insert a name\";\n      setBtnSend(false);\n    } else if (!input.resume) {\n      err.resume = \"You must insert a Resume\";\n      setBtnSend(false);\n    } else {\n      setBtnSend(true);\n    }\n\n    return err;\n  } //tengo que renderizar el formulario y poder guardarlo en un estado\n\n\n  const [input, setInput] = useState({\n    //yo al objeto le paso lo que necesita el post\n    name: \"\",\n    score: \"\",\n    healthylevel: \"\",\n    resume: \"\",\n    stepbystep: \"\",\n    image: \"\",\n    diets: [] //todo esto es lo que me pide el readme\n\n  }); // diets es un arreglo para poder meterle mas de uno\n  //vamos a empezar a aplicar logicas\n  //cada vez que yo cambie mis input no se vayan cambiando\n  //quiero ir guardando lo que el usuario va a ir escribiendo\n\n  function handleChange(e) {\n    setInput({ ...input,\n      [e.target.name]: e.target.value\n    });\n    setErr(validar({ ...input,\n      [e.target.name]: e.target.value\n    }));\n  } //cada vez que ejecutes esta funcion, ademas de lo que tiene agregale lo que se va modificando\n  //como este se porta de forma distinta tengo que usar otra funcion\n\n\n  function handleSelect(e) {\n    setInput({ ...input,\n      diets: [...input.diets, e.target.value]\n    });\n  } //es la que se utiliza para los tipos de dieta\n  //traeme lo que ya habia y concatenale lo que yo te estoy seleccionando ahora\n  //hago como una lista\n  //por ultimo me falta el submit\n\n\n  function handleSubmit(e) {\n    e.preventDefault();\n\n    if (!input.diets.length) {\n      return alert(\"You must insert diet type\");\n    } else {\n      if (!input.image) input.image = \"https://cdn.pixabay.com/photo/2014/12/21/23/28/recipe-575434_960_720.png\";\n      dispatch(postRecipe(input));\n      alert(\"Recipe created!\");\n      setInput({\n        name: \"\",\n        score: \"\",\n        healthylevel: \"\",\n        resume: \"\",\n        stepbystep: \"\",\n        image: \"\",\n        diets: []\n      });\n      history.push('/home');\n    }\n  } //esto lo hago para poder renderizarlas\n\n\n  useEffect(() => {\n    dispatch(getRecipeType());\n  }, [dispatch]); //para poder ir eliminando si tengo ganas, con el botton X u otro hago un handleDelete\n\n  function handleDelete(el) {\n    setInput({ ...input,\n      diets: input.diets.filter(t => t !== el)\n    });\n  } //lo renderizo  \n  //form es la etiqueta que me deja crear el formulario\n  //label es la casilla que me deja ir creando los ingresos\n  //dentro del label, en un input, pongo lo que necesito     \n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crearReceta\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Create a New Recipe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"formulario\",\n        onSubmit: e => handleSubmit(e),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form1\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"casilla1\",\n            type: \"text\",\n            value: input.name,\n            name: \"name\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 13\n          }, this), err.name && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: err.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Resume:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"casilla4\",\n            type: \"text\",\n            value: input.resume,\n            name: \"resume\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 14\n          }, this), err.resume && /*#__PURE__*/_jsxDEV(\"p\", {\n            children: err.resume\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Score:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"casilla2\",\n            type: \"text\",\n            value: input.score,\n            name: \"score\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Healthy Level:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"casilla3\",\n            type: \"text\",\n            value: input.healthylevel,\n            name: \"healthylevel\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form5\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Step by Step:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"casilla5\",\n            type: \"text\",\n            value: input.stepByStep,\n            name: \"stepByStep\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form6\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Image:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"casilla6\",\n            type: \"text\",\n            value: input.image,\n            name: \"image\",\n            onChange: e => handleChange(e)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 14\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form7\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Type of Diet:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"casilla7\",\n            onChange: e => handleSelect(e),\n            name: \"diets\",\n            children: types.map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: t.name,\n              children: t.name\n            }, t.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 14\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"crear\",\n              type: \"submit\",\n              disabled: !btnSend,\n              children: \"Create Recipe\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 14\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/home\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"volver\",\n              children: \"Go back\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 31\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"seleccion\",\n            children: input.diets && input.diets.map(el => el + \",\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"lista\",\n            children: input.diets && input.diets.map(el => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: el\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"botonX\",\n                onClick: () => handleDelete(el),\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 5\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 14\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 10\n  }, this);\n}\n\n_s(RecipeCreate, \"KCUg6pZvC5apYzP0Fzw5rNxVFCc=\", false, function () {\n  return [useDispatch, useSelector, useHistory];\n});\n\n_c = RecipeCreate;\nexport default RecipeCreate;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeCreate\");","map":{"version":3,"sources":["/Users/victoriacasal/Desktop/Food/PI-Food-main/PI-Food/PI-Food-main/client/src/components/RecipeCreate.jsx"],"names":["React","useState","useEffect","Link","useHistory","postRecipe","getRecipeType","useDispatch","useSelector","styles","RecipeCreate","dispatch","types","state","recipeTypes","history","err","setErr","btnSend","setBtnSend","validar","input","name","resume","setInput","score","healthylevel","stepbystep","image","diets","handleChange","e","target","value","handleSelect","handleSubmit","preventDefault","length","alert","push","handleDelete","el","filter","t","stepByStep","map","id"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport {Link, useHistory} from 'react-router-dom';\nimport {postRecipe, getRecipeType} from '../actions/index';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport styles from \"../styles/RecipeCreate.css\";\n\nfunction RecipeCreate() {\n        const dispatch = useDispatch();\n        const types = useSelector((state) => state.recipeTypes) //me traigo las recetas usando el useSelector, trayendo el estado\n        //el history y history.push, es basicamente lo que hace para redirigirme a la ruta que yo le diga\n        const history = useHistory();\n        //me creo una constante para poder hacer la validacion\n        const [err, setErr] = useState({});//va a ser un objeto vacio\n        //al bloquear el boton, hay campos que son requeridos y si no se llenan no te deja\n        //crear la receta\n        //tambien para poder bloquear el boton\n        const [btnSend, setBtnSend] = useState(false);\n       //la validacion tmb se haria desde el back, es mas correcto hacerlo de los dos lados y que no se rompa\n    //y por fuera de todo lo que vine haciendo voy a crear la validacion del formulario\n        /****control de errores */\n        function validar(input){\n                let err = {};\n                if(!input.name){\n                        err.name=\"You must insert a name\";\n                        setBtnSend(false);\n                }else if(!input.resume){\n                        err.resume=\"You must insert a Resume\";\n                        setBtnSend(false);\n                }else{\n                        setBtnSend(true);\n                }\n                return err;\n        }    //tengo que renderizar el formulario y poder guardarlo en un estado\n        const [input, setInput] = useState({ //yo al objeto le paso lo que necesita el post\n                name: \"\",\n                score:\"\",\n                healthylevel:\"\",\n                resume: \"\",\n                stepbystep:\"\",\n                image:\"\",\n                diets:[], //todo esto es lo que me pide el readme\n        }) // diets es un arreglo para poder meterle mas de uno\n//vamos a empezar a aplicar logicas\n//cada vez que yo cambie mis input no se vayan cambiando\n//quiero ir guardando lo que el usuario va a ir escribiendo\n        function handleChange(e){\n                setInput({\n                        ...input,\n                        [e.target.name]: e.target.value,\n                })\n                \n                setErr(validar({\n                        ...input,\n                        [e.target.name]: e.target.value,\n                }))\n                \n        }\n\n//cada vez que ejecutes esta funcion, ademas de lo que tiene agregale lo que se va modificando\n\n//como este se porta de forma distinta tengo que usar otra funcion\n\n        function handleSelect(e){\n               \n                setInput({\n                        ...input,\n                        diets: [...input.diets, e.target.value],\n                })\n        }\n//es la que se utiliza para los tipos de dieta\n//traeme lo que ya habia y concatenale lo que yo te estoy seleccionando ahora\n//hago como una lista\n\n//por ultimo me falta el submit\n        function handleSubmit(e){\n                e.preventDefault();\n                if(!input.diets.length){\n                        return alert(\"You must insert diet type\")\n                }else{\n                    if(!input.image) input.image=\"https://cdn.pixabay.com/photo/2014/12/21/23/28/recipe-575434_960_720.png\"\n                    dispatch(postRecipe(input));\n                    alert(\"Recipe created!\")\n                    setInput({\n                          name: \"\",\n                          score:\"\",\n                          healthylevel:\"\",\n                          resume: \"\",\n                          stepbystep:\"\",\n                          image:\"\",\n                          diets:[],  \n                        })\n                        history.push('/home');\n                }\n        }\n        //esto lo hago para poder renderizarlas\n        useEffect(() => {\n                dispatch(getRecipeType());\n        },[dispatch]);\n\n        //para poder ir eliminando si tengo ganas, con el botton X u otro hago un handleDelete\nfunction handleDelete(el) {\n    setInput({\n        ...input,\n        diets: input.diets.filter(t => t !== el)\n    })\n}\n //lo renderizo  \n //form es la etiqueta que me deja crear el formulario\n //label es la casilla que me deja ir creando los ingresos\n //dentro del label, en un input, pongo lo que necesito     \n        return (\n         <div className=\"crearReceta\">\n          <div>\n            <h1>Create a New Recipe</h1>\n            <form className=\"formulario\" onSubmit={(e) => handleSubmit(e)}>\n            <div className=\"form1\">\n            <label>Name:</label>\n            <input className=\"casilla1\" type=\"text\" value={input.name} name=\"name\"onChange={(e) => handleChange(e)}/>\n             {\n             err.name && (\n             <p>{err.name}</p>\n                         )\n             }\n             </div>\n             <div className=\"form4\">\n             <label>Resume:</label>\n             <input className=\"casilla4\" type=\"text\" value={input.resume} name=\"resume\"onChange={(e) => handleChange(e)}/>\n             {\n             err.resume && (\n             <p>{err.resume}</p>\n                           )\n             }\n             </div>\n             <div className=\"form2\">\n             <label>Score:</label>\n             <input className=\"casilla2\" type=\"text\" value={input.score} name=\"score\"onChange={(e) => handleChange(e)}/>\n             </div>\n             <div className=\"form3\">\n             <label>Healthy Level:</label>\n             <input className=\"casilla3\" type=\"text\" value={input.healthylevel} name=\"healthylevel\"onChange={(e) => handleChange(e)}/>\n             </div>\n             <div className=\"form5\">\n             <label>Step by Step:</label>\n             <input className=\"casilla5\" type=\"text\" value={input.stepByStep} name=\"stepByStep\" onChange={(e) => handleChange(e)}/>\n             </div>\n             <div className=\"form6\">\n             <label>Image:</label>\n             <input className=\"casilla6\" type=\"text\" value={input.image} name=\"image\" onChange={(e) => handleChange(e)}/>\n             </div>\n              <div className=\"form7\">\n             <label>Type of Diet:</label>\n              <select className=\"casilla7\" onChange={(e) => handleSelect(e)} name=\"diets\">\n              {\n             types.map((t) => (\n             <option value={t.name} key={t.id}>{t.name}</option>\n                             ))                       \n                   }\n             </select>\n             <div>\n             <button className=\"crear\" type=\"submit\" disabled={!btnSend}>Create Recipe</button>\n             </div>\n             <Link to='/home'><button className=\"volver\">Go back</button></Link>\n             <ul className=\"seleccion\">{input.diets && input.diets.map(el => el + \",\")}</ul>\n             </div>\n             <div>\n        <div className=\"lista\">\n             {input.diets && input.diets.map(el => \n    <div>\n        <p>{el}</p>\n        <button className=\"botonX\" onClick={()=> handleDelete(el)}>X</button>\n        </div>\n   )}\n   </div>\n             <div>\n             </div>\n             </div>\n             </form>\n             </div>\n             </div>\n        )\n}\n\nexport default RecipeCreate"]},"metadata":{},"sourceType":"module"}