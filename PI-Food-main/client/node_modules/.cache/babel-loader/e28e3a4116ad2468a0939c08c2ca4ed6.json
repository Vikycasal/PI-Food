{"ast":null,"code":"//creo el estado inicial\nconst initialState = {\n  recipes: [],\n  allRecipes: [],\n  recipeTypes: [],\n  detail: []\n}; //1\n\nfunction rootReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"GET_RECIPES\":\n      return { ...state,\n        recipes: action.payload,\n        allRecipes: action.payload\n      };\n    //hago el primer filtro que es el ascendente y descendente en este caso el score\n\n    case \"ORDER_BY_SCORE\":\n      let orderArray = action.payload === \"asc\" ? state.recipes.sort(function (a, b) {\n        if (a.score > b.score) {\n          return 1;\n        }\n\n        if (b.score > a.score) {\n          return -1;\n        }\n\n        return 0;\n      }) : state.recipes.sort(function (a, b) {\n        if (a.score > b.score) {\n          return -1;\n        }\n\n        if (b.score > a.score) {\n          return 1;\n        }\n\n        return 0;\n      });\n      return { ...state,\n        recipes: orderArray\n      };\n    //hacemos la logica del segundo filtro que es la que ordena a las recetas por orden alfabetico\n\n    case 'ORDER_BY_ALPHA':\n      let alphaArr = action.payload === 'A-Z' ? state.allRecipes.sort(function (a, b) {\n        if (a.name.toLowerCase() > b.name.toLowerCase()) {\n          return 1;\n        }\n\n        ;\n\n        if (a.name.toLowerCase() < b.name.toLowerCase()) {\n          return -1;\n        }\n\n        ;\n        return 0;\n      }) : state.allRecipes.sort(function (a, b) {\n        if (a.name.toLowerCase() > b.name.toLowerCase()) {\n          return -1;\n        }\n\n        ;\n\n        if (a.name.toLowerCase() < b.name.toLowerCase()) {\n          return 1;\n        }\n\n        ;\n        return 0;\n      });\n      return { ...state,\n        recipes: alphaArr\n      };\n    //hago el ultimo filtro que es el que me hago por tipo de dieta\n\n    case \"FILTER_BY_DIET_TYPES\":\n      const allRecipes = state.allRecipes;\n      const dietsAPI = [];\n      const dietsDB = [];\n      allRecipes.forEach(e => {\n        if (e.hasOwnProperty('diets') && e.diets.includes(action.payload)) {\n          dietsAPI.push(e);\n        }\n      });\n      allRecipes.forEach(e => {\n        if (e.hasOwnProperty('DietTypes') && e.DietTypes.map(c => c.name === action.payload)) {\n          dietsDB.push(e);\n        }\n      });\n      const find = dietsAPI.concat(dietsDB);\n\n      if (find.length) {\n        return { ...state,\n          recipes: find\n        };\n      }\n\n      ;\n      break;\n    //creo el caso del search bar, una vez hecha la accion\n    //es aca donde hago la logica\n    //el search bar no es mas que un filtrado mas que ya hicimos en el back\n\n    case \"GET_NAME_RECIPE\":\n      return { //devolveme como siempre el estado\n        ...state,\n        recipes: action.payload //y las recetas\n\n      };\n    //en recipes porque es el arreglo que estoy renderizando\n    //ahora tengo que pasarlo al reducer, primero el get type\n\n    case \"GET_RECIPE_TYPE\":\n      return { ...state,\n        recipeTypes: action.payload\n      };\n    //siempre necesito ponerlos en el reducer, tiene que estar, tmb le paso el post\n\n    case \"POST_RECIPE\":\n      return { ...state\n      };\n    //y este es el ultimo caso que necesito hacer que es por el detalle\n\n    case \"GET_DETAIL\":\n      return { ...state,\n        detail: action.payload\n      };\n    //este es el ultimo\n\n    default:\n      return state;\n  }\n}\n\nexport default rootReducer;","map":{"version":3,"sources":["/Users/victoriacasal/Desktop/Food/PI-Food-main/PI-Food/PI-Food-main/client/src/reducer/index.js"],"names":["initialState","recipes","allRecipes","recipeTypes","detail","rootReducer","state","action","type","payload","orderArray","sort","a","b","score","alphaArr","name","toLowerCase","dietsAPI","dietsDB","forEach","e","hasOwnProperty","diets","includes","push","DietTypes","map","c","find","concat","length"],"mappings":"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","sourcesContent":["//creo el estado inicial\nconst initialState = {\n   recipes : [],\n   allRecipes : [],\n   recipeTypes: [],\n   detail: [],\n}\n\n//1\nfunction rootReducer (state = initialState, action){\n  switch(action.type) {\n    case \"GET_RECIPES\":\n        return{\n                ...state,\n                recipes: action.payload,\n                allRecipes : action.payload\n          } //hago el primer filtro que es el ascendente y descendente en este caso el score\n    case \"ORDER_BY_SCORE\":\n            let orderArray = action.payload===\"asc\" ? \n            state.recipes.sort(function (a,b){\n                    if(a.score > b.score){\n                            return 1;\n                    }\n                    if(b.score > a.score){\n                            return -1;\n                    }\n                    return 0;\n            }) :\n            state.recipes.sort(function (a,b){\n                    if(a.score > b.score){\n                            return -1;\n                    }\n                    if(b.score > a.score){\n                            return 1;\n                    }\n                    return 0;\n            });\n            return{\n                    ...state,\n                    recipes:orderArray\n            }\n            //hacemos la logica del segundo filtro que es la que ordena a las recetas por orden alfabetico\n            case 'ORDER_BY_ALPHA':\n              let alphaArr = action.payload === 'A-Z' ? state.allRecipes.sort(function (a, b) {\n                        if (a.name.toLowerCase() > b.name.toLowerCase()) {\n                                      return 1;\n                        };\n                        if (a.name.toLowerCase() < b.name.toLowerCase()) {\n                              return -1;\n                        };\n                        return 0;\n              }) : state.allRecipes.sort(function (a, b) {\n                      if (a.name.toLowerCase() > b.name.toLowerCase()) {\n                              return -1;\n                      };\n                      if (a.name.toLowerCase() < b.name.toLowerCase()) {\n                              return 1;\n                      };\n                      return 0;\n              });\n              return {\n                      ...state,\n                      recipes: alphaArr\n              }\n              //hago el ultimo filtro que es el que me hago por tipo de dieta\n              case \"FILTER_BY_DIET_TYPES\":\n                const allRecipes = state.allRecipes\n                const dietsAPI = []\n                const dietsDB = []\n                allRecipes.forEach(e => {\n                    if (e.hasOwnProperty('diets') && e.diets.includes(action.payload)) {\n                        dietsAPI.push(e)\n                    }\n                })\n    \n                allRecipes.forEach(e => {\n                    if (e.hasOwnProperty('DietTypes') && e.DietTypes.map(c => c.name === action.payload)) {\n                        dietsDB.push(e)\n                    }\n                })\n                const find = dietsAPI.concat(dietsDB)\n                if (find.length) {\n                    return {\n                        ...state,\n                        recipes: find\n                    }\n                };\n                break;\n                //creo el caso del search bar, una vez hecha la accion\n                //es aca donde hago la logica\n                //el search bar no es mas que un filtrado mas que ya hicimos en el back\n                case \"GET_NAME_RECIPE\":\n                        return{ //devolveme como siempre el estado\n                                ...state,\n                                recipes : action.payload, //y las recetas\n                        } //en recipes porque es el arreglo que estoy renderizando\n        //ahora tengo que pasarlo al reducer, primero el get type\n        case \"GET_RECIPE_TYPE\":\n                return{\n                        ...state,\n                        recipeTypes: action.payload,\n                }\n                //siempre necesito ponerlos en el reducer, tiene que estar, tmb le paso el post\n                case \"POST_RECIPE\":\n                        return{\n                                ...state,\n                        }\n                        //y este es el ultimo caso que necesito hacer que es por el detalle\n                        case \"GET_DETAIL\":\n                                return{\n                                        ...state,\n                                        detail : action.payload,\n                                }\n                        //este es el ultimo\n          default:\n            return state;\n  }\n}\n \nexport default rootReducer;"]},"metadata":{},"sourceType":"module"}