{"ast":null,"code":"var _jsxFileName = \"/Users/victoriacasal/Desktop/Food/PI-Food-main/PI-Food/PI-Food-main/client/src/components/RecipeCreate.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useHistory } from 'react-router-dom';\nimport { postRecipe, getRecipeType } from '../actions/index';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RecipeCreate() {\n  _s();\n\n  const dispatch = useDispatch();\n  const types = useSelector(state => state.recipeTypes); //tengo que renderizar el formulario y poder guardarlo en un estado\n\n  const [input, setInput] = useState({\n    name: \"\",\n    score: \"\",\n    healthylevel: \"\",\n    resume: \"\",\n    stepbystep: \"\",\n    image: \"\",\n    diets: []\n  });\n  useEffect(() => {\n    dispatch(getRecipeType());\n  }, [dispatch]); //vamos a empezar a aplicar logicas\n  //cada vez que yo cambie mis input no se vayan cambiando\n  //quiero ir guardando lo que el usuario va a ir escribiendo\n\n  function handleChange(e) {\n    setInput({ ...input,\n      [e.target.name]: e.target.value\n    });\n  } //cada vez que ejecutes esta funcion, ademas de lo que tiene agregale lo que se va modificando\n  //renderizo\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/home\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Go back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create your own recipe!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Name:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.name,\n          name: \"name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Score:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.score,\n          name: \"score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Healthy Level:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.healthylevel,\n          name: \"healthylevel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Resume:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.resumee,\n          name: \"resume\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Steps:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.stepbystep,\n          name: \"stepbystep\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Image:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input.image,\n          name: \"image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Recipe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n} // <select>\n// {types.map((t) => (\n//     <option value = {t.name}>{t.name}</option>\n// ))}\n// </select>\n\n_s(RecipeCreate, \"UB5SS9w8kl4pNSTJGnJSHhkR4rQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = RecipeCreate;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecipeCreate\");","map":{"version":3,"sources":["/Users/victoriacasal/Desktop/Food/PI-Food-main/PI-Food/PI-Food-main/client/src/components/RecipeCreate.jsx"],"names":["React","useState","useEffect","Link","useHistory","postRecipe","getRecipeType","useDispatch","useSelector","RecipeCreate","dispatch","types","state","recipeTypes","input","setInput","name","score","healthylevel","resume","stepbystep","image","diets","handleChange","e","target","value","resumee"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,IAAR,EAAcC,UAAd,QAA+B,kBAA/B;AACA,SAAQC,UAAR,EAAoBC,aAApB,QAAwC,kBAAxC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACnC,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AACA,QAAMI,KAAK,GAAGH,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACC,WAAlB,CAAzB,CAFmC,CAInC;;AACD,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC;AAClCe,IAAAA,IAAI,EAAE,EAD4B;AAElCC,IAAAA,KAAK,EAAC,EAF4B;AAGlCC,IAAAA,YAAY,EAAC,EAHqB;AAIlCC,IAAAA,MAAM,EAAE,EAJ0B;AAKlCC,IAAAA,UAAU,EAAC,EALuB;AAMlCC,IAAAA,KAAK,EAAC,EAN4B;AAOlCC,IAAAA,KAAK,EAAC;AAP4B,GAAD,CAAlC;AAUHpB,EAAAA,SAAS,CAAC,MAAM;AACZQ,IAAAA,QAAQ,CAACJ,aAAa,EAAd,CAAR;AACH,GAFQ,EAEP,CAACI,QAAD,CAFO,CAAT,CAfuC,CAmBvC;AACA;AACA;;AACA,WAASa,YAAT,CAAsBC,CAAtB,EAAwB;AACpBT,IAAAA,QAAQ,CAAC,EACD,GAAGD,KADF;AAED,OAACU,CAAC,CAACC,MAAF,CAAST,IAAV,GAAiBQ,CAAC,CAACC,MAAF,CAASC;AAFzB,KAAD,CAAR;AAKH,GA5BsC,CA6BvC;AAGA;;;AACA,sBACI;AAAA,4BACI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAG,OAAX;AAAA,6BAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAnB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,8BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACA,UAAA,IAAI,EAAG,MADP;AAEA,UAAA,KAAK,EAAIZ,KAAK,CAACE,IAFf;AAGA,UAAA,IAAI,EAAG;AAHP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eASI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACA,UAAA,IAAI,EAAG,MADP;AAEA,UAAA,KAAK,EAAIF,KAAK,CAACG,KAFf;AAGA,UAAA,IAAI,EAAG;AAHP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cATJ,eAiBI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACA,UAAA,IAAI,EAAG,MADP;AAEA,UAAA,KAAK,EAAIH,KAAK,CAACI,YAFf;AAGA,UAAA,IAAI,EAAG;AAHP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBJ,eAyBI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACA,UAAA,IAAI,EAAG,MADP;AAEA,UAAA,KAAK,EAAIJ,KAAK,CAACa,OAFf;AAGA,UAAA,IAAI,EAAG;AAHP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBJ,eAiCI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACA,UAAA,IAAI,EAAG,MADP;AAEA,UAAA,KAAK,EAAIb,KAAK,CAACM,UAFf;AAGA,UAAA,IAAI,EAAG;AAHP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAjCJ,eAyCI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AACA,UAAA,IAAI,EAAG,MADP;AAEA,UAAA,KAAK,EAAIN,KAAK,CAACO,KAFf;AAGA,UAAA,IAAI,EAAG;AAHP;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAzCJ,eAkDA;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAlDA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4DC,C,CAED;AACA;AACA;AACA;AACA;;GAnGwBZ,Y;UACHF,W,EACHC,W;;;KAFMC,Y","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport {Link, useHistory} from 'react-router-dom';\nimport {postRecipe, getRecipeType} from '../actions/index';\nimport { useDispatch, useSelector } from \"react-redux\";\n\nexport default function RecipeCreate (){\n    const dispatch = useDispatch();\n    const types = useSelector((state) => state.recipeTypes);\n\n    //tengo que renderizar el formulario y poder guardarlo en un estado\n   const [input, setInput] = useState({\n    name: \"\",\n    score:\"\",\n    healthylevel:\"\",\n    resume: \"\",\n    stepbystep:\"\",\n    image:\"\",\n    diets:[],\n   })\n\nuseEffect(() => {\n    dispatch(getRecipeType())\n},[dispatch])\n\n//vamos a empezar a aplicar logicas\n//cada vez que yo cambie mis input no se vayan cambiando\n//quiero ir guardando lo que el usuario va a ir escribiendo\nfunction handleChange(e){\n    setInput({\n            ...input,\n            [e.target.name]: e.target.value,\n    })\n    \n}\n//cada vez que ejecutes esta funcion, ademas de lo que tiene agregale lo que se va modificando\n\n\n//renderizo\nreturn(\n    <div>\n        <Link to = \"/home\"><button>Go back</button></Link>\n        <h1>Create your own recipe!</h1>\n        <form>\n            <div>\n                <label>Name:</label>\n                <input\n                type = \"text\"\n                value = {input.name}\n                name = \"name\"\n                />\n            </div>\n            <div>\n                <label>Score:</label>\n                <input\n                type = \"text\"\n                value = {input.score}\n                name = \"score\"\n                />\n            </div>\n            <div>\n                <label>Healthy Level:</label>\n                <input\n                type = \"text\"\n                value = {input.healthylevel}\n                name = \"healthylevel\"\n                />\n            </div>\n            <div>\n                <label>Resume:</label>\n                <input\n                type = \"text\"\n                value = {input.resumee}\n                name = \"resume\"\n                />\n            </div>\n            <div>\n                <label>Steps:</label>\n                <input\n                type = \"text\"\n                value = {input.stepbystep}\n                name = \"stepbystep\"\n                />\n            </div>\n            <div>\n                <label>Image:</label>\n                <input\n                type = \"text\"\n                value = {input.image}\n                name = \"image\"\n                />\n            </div>\n\n        <button type=\"submit\">Create Recipe</button>\n\n        </form>\n    </div>\n)\n\n}\n\n// <select>\n// {types.map((t) => (\n//     <option value = {t.name}>{t.name}</option>\n// ))}\n// </select>"]},"metadata":{},"sourceType":"module"}